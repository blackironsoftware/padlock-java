/*
 * Cell Block
 * The Black Iron Software Platform is a multi-tenant SaaS coupled with an OAuth compliant authentication service that helps jump start SaaS software development.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@blackironsoftware.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Cell;
import org.openapitools.client.model.Cells;
import org.openapitools.client.model.CreateCellInput;
import org.openapitools.client.model.Error;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CellsApi {
    private ApiClient localVarApiClient;

    public CellsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CellsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createCell
     * @param createCellInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was unacceptable, often due to missing a required parameter. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized  No valid API key provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API key doesn&#39;t have permissions to perform the request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on Black Iron Software&#39;s end. (These are rare.) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCellCall(CreateCellInput createCellInput, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createCellInput;

        // create path and map variables
        String localVarPath = "/cells";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCellValidateBeforeCall(CreateCellInput createCellInput, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = createCellCall(createCellInput, _callback);
        return localVarCall;

    }

    /**
     * Create a cell
     * 
     * @param createCellInput  (optional)
     * @return Cell
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was unacceptable, often due to missing a required parameter. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized  No valid API key provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API key doesn&#39;t have permissions to perform the request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on Black Iron Software&#39;s end. (These are rare.) </td><td>  -  </td></tr>
     </table>
     */
    public Cell createCell(CreateCellInput createCellInput) throws ApiException {
        ApiResponse<Cell> localVarResp = createCellWithHttpInfo(createCellInput);
        return localVarResp.getData();
    }

    /**
     * Create a cell
     * 
     * @param createCellInput  (optional)
     * @return ApiResponse&lt;Cell&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was unacceptable, often due to missing a required parameter. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized  No valid API key provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API key doesn&#39;t have permissions to perform the request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on Black Iron Software&#39;s end. (These are rare.) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Cell> createCellWithHttpInfo(CreateCellInput createCellInput) throws ApiException {
        okhttp3.Call localVarCall = createCellValidateBeforeCall(createCellInput, null);
        Type localVarReturnType = new TypeToken<Cell>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a cell (asynchronously)
     * 
     * @param createCellInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was unacceptable, often due to missing a required parameter. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized  No valid API key provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API key doesn&#39;t have permissions to perform the request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on Black Iron Software&#39;s end. (These are rare.) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCellAsync(CreateCellInput createCellInput, final ApiCallback<Cell> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCellValidateBeforeCall(createCellInput, _callback);
        Type localVarReturnType = new TypeToken<Cell>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCell
     * @param cellId Cell ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> xxx </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized  No valid API key provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API key doesn&#39;t have permissions to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource doesn&#39;t exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on Black Iron Software&#39;s end. (These are rare.) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCellCall(String cellId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cells/{cellId}"
            .replaceAll("\\{" + "cellId" + "\\}", localVarApiClient.escapeString(cellId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCellValidateBeforeCall(String cellId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cellId' is set
        if (cellId == null) {
            throw new ApiException("Missing the required parameter 'cellId' when calling deleteCell(Async)");
        }
        

        okhttp3.Call localVarCall = deleteCellCall(cellId, _callback);
        return localVarCall;

    }

    /**
     * Deletes a cell
     * 
     * @param cellId Cell ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> xxx </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized  No valid API key provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API key doesn&#39;t have permissions to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource doesn&#39;t exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on Black Iron Software&#39;s end. (These are rare.) </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCell(String cellId) throws ApiException {
        deleteCellWithHttpInfo(cellId);
    }

    /**
     * Deletes a cell
     * 
     * @param cellId Cell ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> xxx </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized  No valid API key provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API key doesn&#39;t have permissions to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource doesn&#39;t exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on Black Iron Software&#39;s end. (These are rare.) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCellWithHttpInfo(String cellId) throws ApiException {
        okhttp3.Call localVarCall = deleteCellValidateBeforeCall(cellId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a cell (asynchronously)
     * 
     * @param cellId Cell ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> xxx </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized  No valid API key provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API key doesn&#39;t have permissions to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource doesn&#39;t exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on Black Iron Software&#39;s end. (These are rare.) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCellAsync(String cellId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCellValidateBeforeCall(cellId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCell
     * @param cellId Cell ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized  No valid API key provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API key doesn&#39;t have permissions to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource doesn&#39;t exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on Black Iron Software&#39;s end. (These are rare.) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCellCall(String cellId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cells/{cellId}"
            .replaceAll("\\{" + "cellId" + "\\}", localVarApiClient.escapeString(cellId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCellValidateBeforeCall(String cellId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cellId' is set
        if (cellId == null) {
            throw new ApiException("Missing the required parameter 'cellId' when calling getCell(Async)");
        }
        

        okhttp3.Call localVarCall = getCellCall(cellId, _callback);
        return localVarCall;

    }

    /**
     * Retrieve a cell
     * 
     * @param cellId Cell ID (required)
     * @return Cell
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized  No valid API key provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API key doesn&#39;t have permissions to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource doesn&#39;t exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on Black Iron Software&#39;s end. (These are rare.) </td><td>  -  </td></tr>
     </table>
     */
    public Cell getCell(String cellId) throws ApiException {
        ApiResponse<Cell> localVarResp = getCellWithHttpInfo(cellId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a cell
     * 
     * @param cellId Cell ID (required)
     * @return ApiResponse&lt;Cell&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized  No valid API key provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API key doesn&#39;t have permissions to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource doesn&#39;t exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on Black Iron Software&#39;s end. (These are rare.) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Cell> getCellWithHttpInfo(String cellId) throws ApiException {
        okhttp3.Call localVarCall = getCellValidateBeforeCall(cellId, null);
        Type localVarReturnType = new TypeToken<Cell>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a cell (asynchronously)
     * 
     * @param cellId Cell ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized  No valid API key provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API key doesn&#39;t have permissions to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource doesn&#39;t exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on Black Iron Software&#39;s end. (These are rare.) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCellAsync(String cellId, final ApiCallback<Cell> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCellValidateBeforeCall(cellId, _callback);
        Type localVarReturnType = new TypeToken<Cell>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listCells
     * @param pageSize The number of items to return (optional)
     * @param pageToken The page token that controls what page of items to return (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized  No valid API key provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API key doesn&#39;t have permissions to perform the request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on Black Iron Software&#39;s end. (These are rare.) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCellsCall(Integer pageSize, String pageToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cells";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_token", pageToken));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCellsValidateBeforeCall(Integer pageSize, String pageToken, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listCellsCall(pageSize, pageToken, _callback);
        return localVarCall;

    }

    /**
     * Retrieves a list of cells
     * 
     * @param pageSize The number of items to return (optional)
     * @param pageToken The page token that controls what page of items to return (optional)
     * @return Cells
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized  No valid API key provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API key doesn&#39;t have permissions to perform the request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on Black Iron Software&#39;s end. (These are rare.) </td><td>  -  </td></tr>
     </table>
     */
    public Cells listCells(Integer pageSize, String pageToken) throws ApiException {
        ApiResponse<Cells> localVarResp = listCellsWithHttpInfo(pageSize, pageToken);
        return localVarResp.getData();
    }

    /**
     * Retrieves a list of cells
     * 
     * @param pageSize The number of items to return (optional)
     * @param pageToken The page token that controls what page of items to return (optional)
     * @return ApiResponse&lt;Cells&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized  No valid API key provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API key doesn&#39;t have permissions to perform the request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on Black Iron Software&#39;s end. (These are rare.) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Cells> listCellsWithHttpInfo(Integer pageSize, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listCellsValidateBeforeCall(pageSize, pageToken, null);
        Type localVarReturnType = new TypeToken<Cells>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a list of cells (asynchronously)
     * 
     * @param pageSize The number of items to return (optional)
     * @param pageToken The page token that controls what page of items to return (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized  No valid API key provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API key doesn&#39;t have permissions to perform the request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on Black Iron Software&#39;s end. (These are rare.) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCellsAsync(Integer pageSize, String pageToken, final ApiCallback<Cells> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCellsValidateBeforeCall(pageSize, pageToken, _callback);
        Type localVarReturnType = new TypeToken<Cells>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCell
     * @param cellId Cell ID (required)
     * @param cell  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was unacceptable, often due to missing a required parameter. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized  No valid API key provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API key doesn&#39;t have permissions to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource doesn&#39;t exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on Black Iron Software&#39;s end. (These are rare.) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCellCall(String cellId, Cell cell, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = cell;

        // create path and map variables
        String localVarPath = "/cells/{cellId}"
            .replaceAll("\\{" + "cellId" + "\\}", localVarApiClient.escapeString(cellId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCellValidateBeforeCall(String cellId, Cell cell, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cellId' is set
        if (cellId == null) {
            throw new ApiException("Missing the required parameter 'cellId' when calling updateCell(Async)");
        }
        

        okhttp3.Call localVarCall = updateCellCall(cellId, cell, _callback);
        return localVarCall;

    }

    /**
     * Update a cell
     * 
     * @param cellId Cell ID (required)
     * @param cell  (optional)
     * @return Cell
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was unacceptable, often due to missing a required parameter. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized  No valid API key provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API key doesn&#39;t have permissions to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource doesn&#39;t exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on Black Iron Software&#39;s end. (These are rare.) </td><td>  -  </td></tr>
     </table>
     */
    public Cell updateCell(String cellId, Cell cell) throws ApiException {
        ApiResponse<Cell> localVarResp = updateCellWithHttpInfo(cellId, cell);
        return localVarResp.getData();
    }

    /**
     * Update a cell
     * 
     * @param cellId Cell ID (required)
     * @param cell  (optional)
     * @return ApiResponse&lt;Cell&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was unacceptable, often due to missing a required parameter. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized  No valid API key provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API key doesn&#39;t have permissions to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource doesn&#39;t exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on Black Iron Software&#39;s end. (These are rare.) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Cell> updateCellWithHttpInfo(String cellId, Cell cell) throws ApiException {
        okhttp3.Call localVarCall = updateCellValidateBeforeCall(cellId, cell, null);
        Type localVarReturnType = new TypeToken<Cell>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a cell (asynchronously)
     * 
     * @param cellId Cell ID (required)
     * @param cell  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was unacceptable, often due to missing a required parameter. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized  No valid API key provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API key doesn&#39;t have permissions to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource doesn&#39;t exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on Black Iron Software&#39;s end. (These are rare.) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCellAsync(String cellId, Cell cell, final ApiCallback<Cell> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCellValidateBeforeCall(cellId, cell, _callback);
        Type localVarReturnType = new TypeToken<Cell>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
